boxcolor = "yellow")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "black")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "lightblue")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "lightred")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "lightred")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "light")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "lightpink")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "red")
image_annotate(ben10, text = "Ben 10", size = 20,
degrees = -10, font = "Georgia",
color = "green",
location = "+40+135",
style = "italic",
boxcolor = "lightblue")
image_border(image_background(ben10, "hotpink"), "#000080", "20x10")
image_border(image_background(ben10, "pink"), "#000080", "20x10")
image_border(image_background(ben10, "yellow"), "#000080", "20x10")
image_border(image_background(ben10, "yellow"), "green", "20x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
library(magick)
ben <- image_read("C:/Users/User/OneDrive - unb.br/Documentos/GitHub/Manipulacao-de-imagens/images/ben.png")
print(ben)
ben10 <-image_scale(image_scale(ben,"30%"),"50%")
ben10
image_border(ben10, color = "green",
geometry = "10x10",operator = "copy")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
image_border(image_background(ben10, "yellow"), "green", "10x10")
ben10_jpeg <- image_convert(ben10, format ="jpeg" )
ben10_jpeg
ben10_jpeg <- image_convert(ben10, format ="jpeg" )
ben10_jpeg
ben10_jpg <- image_convert(ben10, format ="jpg" )
ben10_jpg
ben10_rgb <- image_convert(ben10, format ="rgb" )
ben10_rgb
ben10_rgb <- image_convert(ben10, format ="rgb" )
ben10_rgb
ben10_tiff <- image_convert(ben10, format ="tiff" )
ben10_tiff
ben10_tiff <- image_convert(ben10, format ="tiff" )
ben10_tiff
ben10_tiff <- image_convert(ben10, format ="tiff" )
ben10_tiff
ben10_tiff <- image_convert(ben10, format ="tiff" )
image_info(ben10_tiff)
ben10_tiff <- image_convert(ben10, format ="tiff" )
image_info(ben10_tiff)
ben10_tiff <- image_convert(ben10, format ="tiff" )
image_info(ben10_tiff)
ben10_tiff <- image_convert(ben10, format ="tiff" )
image_info(ben10_tiff)
ben10_jpeg <- image_convert(ben10, format ="jpeg" )
image_info(ben10_jpeg)
ben10_jpeg <- image_convert(ben10, format ="jpeg" )
image_info(ben10_jpeg)
image_write(ben10, path = "ben10.jpeg", format = "jpeg", quality = 75)
image_write(ben10, path = "ben10.png", format = "", quality = 75)
image_write(ben10, path = "ben10.png", format = "", quality = 75)
image_write(ben10, path = "ben10.png", format = "png", quality = 75)
image_write(ben10, path = "ben10.png", format = "png", quality = 75)
image_write(ben10, path = "ben10.png", format = "png", quality = 75)
image_write(ben10, path = "ben10.png", format = "png", quality = 75)
image_write(ben10, path = "ben10.jpg", format = "jpg", quality = 75)
image_write(ben10, path = "ben10.jpg", format = "jpg", quality = 75)
image_write(ben10, path = "ben10.jpg", format = "jpeg", quality = 75)
image_fill(ben10, "blue", point = "+50+200", fuzz = 20)
image_modulate(ben10, brightness = 100, saturation = 200, hue = 100)
install.packages("seriation")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
install.packages("seriation")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
require("magick")
require("OpenImageR")
require("imager")
require("seriation")
library(grImport)
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
library(seriation)
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
iter.refine(im,1000) %>% rebuild(borders=T) %>% plot
library(imager)
library(purrr)
setwd("C:/Users/User/OneDrive - unb.br/Documentos/GitHub/Manipulacao-de-imagens/images")
im <- load.image('ocean.jpg') %>% imresize(.5)
#Dividir ao longo de x, e depois y
qsplit <- function(im)
{
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qsplit(im) %>% as.imlist %>% plot
qunsplit <- function(l)
{
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>% imappend("x")
}
qsplit(im) %>% qunsplit %>% plot
#Max std. dev across channels
imsd <- function(im)
{
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l)
{
if (is.cimg(l)) #We have a leaf
{
qs <- qsplit(l) #Split
if (any(dim(l)[1:2] <= 4)) #Quadrants are very small
{
qs$sds <- rep(0,4) #Prevent further refinement
}
else
{
qs$sds <- map_dbl(qs,imsd) #Store std.dev of children
}
qs
}
else #Not a leaf, explore further
{
indm <- which.max(l$sds) #Find child with max. std. dev
l[[indm]] <- refine(l[[indm]]) #Refine
l$sds[indm] <- max(l[[indm]]$sds) #Update std. dev
l
}
}
rebuild <- function(l,borders=FALSE)
{
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders) else rebuild(.,borders=borders)) %>% qunsplit
}
#Produce an image that's just the average of image im
#Optionally, add borders
meanim <- function(im,borders=FALSE)
{
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>% imappend("c")
if (borders)
{
im[px.borders(im)] <- 0
}
im
}
iter.refine <- function(im,nIter)
{
for (i in seq_len(nIter)) { im <- refine(im) };
im
}
#The first four iterations of the process
map_il(1:4,~ iter.refine(im,.) %>% rebuild) %>% plot
iter.refine(im,1000) %>% rebuild(borders=T) %>% plot
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
##reorder the columns of an image
scramble <- function(acr)
{
imsplit(acr,"x") %>% { .[sample(length(.))] } %>% imappend("x")
}
scramble(acr) %>% plot
imlist(acr,scramble(acr)) %>% plot(layout="row")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled image")
load.example(boats)
load.example("boats")
scramble <- function(im,axis="x")
{
imsplit(im,axis) %>% { .[sample(length(.))] } %>% imappend(axis)
}
unscramble <- function(acr,axis="x",method="TSP",...)
{
cols <- imsplit(acr,axis)
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend(axis)
}
acr <- scramble(im,"x") %>% scramble("y")
#The double scramble produces an unrecognisable mess
plot(acr)
scramble <- function(acr,axis="x")
{
imsplit(acr,axis) %>% { .[sample(length(.))] } %>% imappend(axis)
}
unscramble <- function(acr,axis="x",method="TSP",...)
{
cols <- imsplit(acr,axis)
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend(axis)
}
acr <- scramble(acr,"x") %>% scramble("y")
#The double scramble produces an unrecognisable mess
plot(acr)
scramble <- function(acr,axis="x")
{
imsplit(acr,axis) %>% { .[sample(length(.))] } %>% imappend(axis)
}
unscramble <- function(acr,axis="x",method="TSP",...)
{
cols <- imsplit(acr,axis)
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend(axis)
}
acr <- scramble(acr,"x") %>% scramble("y")
#The double scramble produces an unrecognisable mess
plot(acr)
scramble <- function(acr,axis="x")
{
imsplit(acr,axis) %>% { .[sample(length(.))] } %>% imappend(axis)
}
unscramble <- function(acr,axis="x",method="TSP",...)
{
cols <- imsplit(acr,axis)
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend(axis)
}
acr <- scramble(acr,"x") %>% scramble("y")
#The double scramble produces an unrecognisable mess
plot(acr)
scramble <- function(acr,axis="x")
{
imsplit(acr,axis) %>% { .[sample(length(.))] } %>% imappend(axis)
}
unscramble <- function(acr,axis="x",method="TSP",...)
{
cols <- imsplit(acr,axis)
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend(axis)
}
acr <- scramble(acr,"x") %>% scramble("y")
#The double scramble produces an unrecognisable mess
plot(acr)
scramble <- function(acr,axis="x")
{
imsplit(acr,axis) %>% { .[sample(length(.))] } %>% imappend(axis)
}
unscramble <- function(acr,axis="x",method="TSP",...)
{
cols <- imsplit(acr,axis)
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend(axis)
}
acr <- scramble(acr,"x") %>% scramble("y")
#The double scramble produces an unrecognisable mess
plot(acr)
unscramble(acr,"y") %>% unscramble("x") %>% plot
iter.refine(ocn,1000) %>% rebuild(borders=T) %>% plot
library(acrager)
library(imager)
library(purrr)
setwd("C:/Users/User/OneDrive - unb.br/Documentos/GitHub/Manipulacao-de-acragens/acrages")
library(imager)
library(purrr)
setwd("C:/Users/User/OneDrive - unb.br/Documentos/GitHub/Manipulacao-de-acragens/images")
library(imager)
library(purrr)
setwd("C:/Users/User/OneDrive - unb.br/Documentos/GitHub/Manipulacao-de-imagens/images")
ocn <- load.acrage('ocean.jpg') %>% acrresize(.5)
library(imager)
library(purrr)
setwd("C:/Users/User/OneDrive - unb.br/Documentos/GitHub/Manipulacao-de-imagens/images")
ocn <- load.image('ocean.jpg') %>% imaresize(.5)
unscramble(acr,"y") %>% unscramble("x") %>% plot
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- acrsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% acrappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled acrage")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% acrappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled acrage")
library(seriation)
unscramble <- function(acr.s,method="TSP",...)
{
cols <- imsplit(acr.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(acr) %>% unscramble %>% plot(main="Unscrambled acrage")
library(acrager)
library(imager)
library(purrr)
set.seed(2)
acr <- load.acrage("acropolis.jpg")
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
##reorder the columns of an acrage
scramble <- function(acr)
{
acrsplit(acr,"x") %>% { .[sample(length(.))] } %>% acrappend("x")
}
scramble(acr) %>% plot
library(imager)
library(purrr)
set.seed(2)
acr <- load.image("acropolis.jpg")
##reorder the columns of an acrage
scramble <- function(acr)
{
acrsplit(acr,"x") %>% { .[sample(length(.))] } %>% imappend("x")
}
scramble(acr) %>% plot
library(imager)
library(purrr)
set.seed(2)
im <- load.image("acropolis.jpg")
##reorder the columns of an image
scramble <- function(im)
{
imsplit(im,"x") %>% { .[sample(length(.))] } %>% imappend("x")
}
scramble(im) %>% plot
imlist(im,scramble(im)) %>% plot(layout="row")
library(seriation)
unscramble <- function(im.s,method="TSP",...)
{
cols <- imsplit(im.s,"x")
#Compute a distance matrix (using L1 - Manhattan - distance)
#Each entry D_ij compares column i to column j
D <- map(cols,as.vector) %>% do.call(rbind,.) %>% dist(method="manhattan")
out <- seriate(D,method=method,...)
cols[get_order(out)] %>% imappend("x")
}
scramble(im) %>% unscramble %>% plot(main="Unscrambled image")
